Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 records
ii. Business table = 10000 records
iii. Category table = 10000 records
iv. Checkin table = 10000 records
v. elite_years table = 10000 records
vi. friend table = 10000 records 
vii. hours table = 10000 records
viii. photo table = 10000 records
ix. review table = 10000 records
x. tip table = 10000 records
xi. user table = 10000 records
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 distinct records (id as primary key)
ii. Hours = 1562 distinct records (business_id as foreign key)
iii. Category = 2643 distinct records (business_id as foreign key)
iv. Attribute = 1115 distinct records (business_id as foreign key)
v. Review = 10000 distinct reocrds (id as primary key), 8090 distinct records (business_id as foreign key), 9581 distinct records (user_id as foreign key)
vi. Checkin = 493 distinct records (business_id as foreign key)
vii. Photo = 10000 distint records (id as primary key), 6493 distinct records (business_id as foreign key)
viii. Tip = 537 distinct records (user_id as foreign key), 3979 distinct records (business_id as foreign key)
ix. User = 10000 distinct records (id as foreign key)
x. Friend = 11 distinct records (user_id as foreign key)
xi. Elite_years = 2780 distinct records (user_id as foreign key)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	
	
	SQL code used to arrive at answer:
	
	No

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:  1		max:	5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:   0		max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: SELECT city, review_count
                                           FROM business
                                           GROUP BY city
                                           ORDER BY 2 DESC


	
	
	Copy and Paste the Result Below:
	
+------------------------+--------------+
| city                   | review_count |
+------------------------+--------------+
| Woodmere Village       |          242 |
| Mount Lebanon          |          138 |
| Charlotte              |          120 |
| McMurray               |          112 |
| North York             |          109 |
| Enterprise             |           89 |
| Matthews               |           77 |
| Munroe Falls           |           74 |
| Ahwatukee              |           69 |
| Pittsburgh             |           68 |
| Woodmere               |           68 |
| Tolleson               |           65 |
| Pineville              |           63 |
| Carnegie               |           61 |
| Macedonia              |           58 |
| Markham                |           54 |
| Whitchurch-Stouffville |           52 |
| Windsor                |           50 |
| Goodyear               |           49 |
| Gibsonia               |           45 |
| Summerlin              |           44 |
| Peninsula              |           42 |
| Richfield              |           42 |
| Dormont                |           40 |
| nboulder city          |           40 |
+------------------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT b.city, r.starsm b.name
FROM business b JOIN review r
WHERE b.city = 'Avon'

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+------+-------+---------------+
| city | stars | name          |
+------+-------+---------------+
| Avon |     4 | Helen & Kal's |
| Avon |     4 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     4 | Helen & Kal's |
| Avon |     1 | Helen & Kal's |
| Avon |     2 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     1 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     2 | Helen & Kal's |
| Avon |     2 | Helen & Kal's |
| Avon |     4 | Helen & Kal's |
| Avon |     1 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     1 | Helen & Kal's |
| Avon |     3 | Helen & Kal's |
| Avon |     4 | Helen & Kal's |
| Avon |     4 | Helen & Kal's |
| Avon |     5 | Helen & Kal's |
| Avon |     1 | Helen & Kal's |
| Avon |     2 | Helen & Kal's |
+------+-------+---------------+
(Output limit exceeded, 25 of 100000 total rows shown)


ii. Beachwood

SQL code used to arrive at answer:

SELECT b.city, r.stars, b.name
FROM business b JOIN review r
WHERE b.city = 'Beachwood'

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-----------+-------+---------------------------------+
| city      | stars | name                            |
+-----------+-------+---------------------------------+
| Beachwood |     4 | Maltz Museum of Jewish Heritage |
| Beachwood |     4 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     4 | Maltz Museum of Jewish Heritage |
| Beachwood |     1 | Maltz Museum of Jewish Heritage |
| Beachwood |     2 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     1 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     2 | Maltz Museum of Jewish Heritage |
| Beachwood |     2 | Maltz Museum of Jewish Heritage |
| Beachwood |     4 | Maltz Museum of Jewish Heritage |
| Beachwood |     1 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     1 | Maltz Museum of Jewish Heritage |
| Beachwood |     3 | Maltz Museum of Jewish Heritage |
| Beachwood |     4 | Maltz Museum of Jewish Heritage |
| Beachwood |     4 | Maltz Museum of Jewish Heritage |
| Beachwood |     5 | Maltz Museum of Jewish Heritage |
| Beachwood |     1 | Maltz Museum of Jewish Heritage |
| Beachwood |     2 | Maltz Museum of Jewish Heritage |
+-----------+-------+---------------------------------+
(Output limit exceeded, 25 of 140000 total rows shown)
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT id
,review_count
FROM business
GROUP BY id
ORDER BY review_count DESC
LIMIT 3

	
		
	Copy and Paste the Result Below:
		
+------------------------+--------------+
| id                     | review_count |
+------------------------+--------------+
| 2weQS-RnoOBhb1KsHKyoSQ |         3873 |
| 0W4lkclzZThpx3V65bVgig |         1757 |
| 0FUtlsQrJI7LhqDPxLumEw |         1549 |
+------------------------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
I used the following code to order review count in descending order to analyze the relationship with fans:

SELECT fans
,review_count
FROM user
ORDER BY 2 DESC
LIMIT 10

The result was:

+------+--------------+
| fans | review_count |
+------+--------------+
|  253 |         2000 |
|   50 |         1629 |
|   76 |         1339 |
|  101 |         1246 |
|  126 |         1215 |
|  311 |         1153 |
|   16 |         1116 |
|  104 |         1039 |
|  497 |          968 |
|  173 |          930 |
+------+--------------+

Fan count seems to oscilate with no real pattern looking at the top 10 highest review counts. 

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

There are more reviews with the word "love" in them.	

	SQL code used to arrive at answer:

SELECT COUNT(*) AS 'Total Love'
FROM review
WHERE text LIKE '%love%'

+------------+
| Total Love |
+------------+
|       1780 |
+------------+

SELECT COUNT(*) AS 'Total Hate'
FROM review
WHERE text LIKE '%hate%'

+------------+
| Total Hate |
+------------+
|        232 |
+------------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT id
,fans
FROM user
GROUP BY id
ORDER BY 2 DESC
LIMIT 10
	
	
	Copy and Paste the Result Below:

+------------------------+------+
| id                     | fans |
+------------------------+------+
| -9I98YbNQnLdAmcYfb324Q |  503 |
| -8EnCioUmDygAbsYZmTeRQ |  497 |
| --2vR0DIsmQ6WfcSzKWigw |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw |  159 |
| -9bbDysuiWeo2VShFJJtcw |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ |  126 |
| -9da1xk7zgnnfO1uTVYGkA |  124 |
| -lh59ko3dxChBSZ9U7LfUw |  120 |
+------------------------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Running the following code for the chosen city of Toronto, I can see from the first 25 results of each query that the restaurants with higher star ratings between 4 and 5 touch in the category of being open until the early morning, as late as 2am.

FROM business b JOIN hours h 
ON b.id = h.business_id
WHERE b.city = 'Toronto'
AND stars BETWEEN 2 AND 3

+---------+-------+--------------+-----------------------+
| city    | stars | review_count | hours                 |
+---------+-------+--------------+-----------------------+
| Toronto |   3.0 |           47 | Monday|10:30-21:00    |
| Toronto |   3.0 |           47 | Tuesday|10:30-21:00   |
| Toronto |   3.0 |           47 | Friday|10:30-21:00    |
| Toronto |   3.0 |           47 | Wednesday|10:30-21:00 |
| Toronto |   3.0 |           47 | Thursday|10:30-21:00  |
| Toronto |   3.0 |           47 | Sunday|11:00-19:00    |
| Toronto |   3.0 |           47 | Saturday|10:30-21:00  |
| Toronto |   2.0 |            5 | Monday|11:00-23:00    |
| Toronto |   2.0 |            5 | Tuesday|11:00-23:00   |
| Toronto |   2.0 |            5 | Friday|11:00-23:00    |
| Toronto |   2.0 |            5 | Wednesday|11:00-23:00 |
| Toronto |   2.0 |            5 | Thursday|11:00-23:00  |
| Toronto |   2.0 |            5 | Sunday|11:00-23:00    |
| Toronto |   2.0 |            5 | Saturday|11:00-23:00  |
| Toronto |   3.0 |           34 | Monday|9:00-23:00     |
| Toronto |   3.0 |           34 | Tuesday|9:00-23:00    |
| Toronto |   3.0 |           34 | Friday|9:00-4:00      |
| Toronto |   3.0 |           34 | Wednesday|9:00-23:00  |
| Toronto |   3.0 |           34 | Thursday|9:00-23:00   |
| Toronto |   3.0 |           34 | Sunday|10:00-23:00    |
| Toronto |   3.0 |           34 | Saturday|10:00-4:00   |
| Toronto |   3.0 |           14 | Monday|6:00-22:00     |
| Toronto |   3.0 |           14 | Tuesday|6:00-22:00    |
| Toronto |   3.0 |           14 | Friday|6:00-21:00     |
| Toronto |   3.0 |           14 | Wednesday|6:00-22:00  |
+---------+-------+--------------+-----------------------+

SELECT b.city, b.stars, b.review_count, h.hours
FROM business b JOIN hours h 
ON b.id = h.business_id
WHERE b.city = 'Toronto'
AND stars BETWEEN 4 AND 5

+---------+-------+--------------+-----------------------+
| city    | stars | review_count | hours                 |
+---------+-------+--------------+-----------------------+
| Toronto |   4.5 |           26 | Monday|16:00-2:00     |
| Toronto |   4.5 |           26 | Tuesday|18:00-2:00    |
| Toronto |   4.5 |           26 | Friday|18:00-2:00     |
| Toronto |   4.5 |           26 | Wednesday|18:00-2:00  |
| Toronto |   4.5 |           26 | Thursday|18:00-2:00   |
| Toronto |   4.5 |           26 | Sunday|16:00-2:00     |
| Toronto |   4.5 |           26 | Saturday|16:00-2:00   |
| Toronto |   4.5 |            6 | Tuesday|11:00-19:00   |
| Toronto |   4.5 |            6 | Friday|11:00-19:00    |
| Toronto |   4.5 |            6 | Wednesday|11:00-19:00 |
| Toronto |   4.5 |            6 | Thursday|11:00-19:00  |
| Toronto |   4.5 |            6 | Sunday|12:00-16:00    |
| Toronto |   4.5 |            6 | Saturday|11:00-17:00  |
| Toronto |   5.0 |            3 | Friday|17:00-22:00    |
| Toronto |   5.0 |            3 | Tuesday|18:00-22:00   |
| Toronto |   5.0 |            3 | Thursday|18:00-22:00  |
| Toronto |   5.0 |            3 | Wednesday|17:00-22:00 |
| Toronto |   5.0 |            3 | Monday|17:00-22:00    |
| Toronto |   4.5 |            8 | Monday|11:00-23:00    |
| Toronto |   4.5 |            8 | Tuesday|11:00-23:00   |
| Toronto |   4.5 |            8 | Friday|11:00-23:00    |
| Toronto |   4.5 |            8 | Wednesday|11:00-23:00 |
| Toronto |   4.5 |            8 | Thursday|11:00-23:00  |
| Toronto |   4.5 |            8 | Sunday|14:00-23:00    |
| Toronto |   4.5 |            8 | Saturday|11:00-23:00  |
+---------+-------+--------------+-----------------------+
(Output limit exceeded, 25 of 46 total rows shown)



ii. Do the two groups you chose to analyze have a different number of reviews?

No they do not. Reviews between 2 and 3 stars account for higher review numbers.
         
SELECT SUM(review_count) AS TotalReview45
FROM business b JOIN hours h 
ON b.id = h.business_id
WHERE b.city = 'Toronto'
AND stars BETWEEN 4 AND 5

+---------------+
| TotalReview45 |
+---------------+
|           954 |
+---------------+

SELECT SUM(review_count) AS TotalReview23
FROM business b JOIN hours h 
ON b.id = h.business_id
WHERE b.city = 'Toronto'
AND stars BETWEEN 2 AND 3



         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

SELECT *
FROM business b JOIN hours h 
ON b.id = h.business_id
WHERE b.city = 'Toronto'
AND stars BETWEEN 2 AND 3
ORDER BY b.stars DESC

This code showed me that the neighborhoods of "Downtown Core" and "Entertainment District" held most of the 3 stars reviews in the 2-3 star category, while in the 4-5 star cateogry "Chinatown" had the upper part of all 5 star reviews and many 4 star reviews were in "High Park".
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
For businesses that are closed, there appears to be a 1:2 review count. For open businesses, there is almost a 1:1 ratio of business to review count.
         
ii. Difference 2:
         
For businesses that are closed, they have almost a whole star lower average rating. 
         
SQL code used for analysis:

SELECT COUNT(*) AS TotalBusinesses, AVG(stars) AS AverageStars, b.review_count
FROM business b JOIN hours h 
ON b.id = h.business_id
WHERE b.city = 'Toronto'
AND is_open = 0

+-----------------+---------------+--------------+
| TotalBusinesses |  AverageStars | review_count |
+-----------------+---------------+--------------+
|              13 | 2.69230769231 |            5 |
+-----------------+---------------+--------------+

SELECT COUNT(*) AS TotalBusinesses, AVG(stars) AS AverageStars, b.review_count
FROM business b JOIN hours h 
ON b.id = h.business_id
WHERE b.city = 'Toronto'
AND is_open = 1

+-----------------+---------------+--------------+
| TotalBusinesses |  AverageStars | review_count |
+-----------------+---------------+--------------+
|              81 | 3.72839506173 |           89 |
+-----------------+---------------+--------------+


	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
I'm going to check to see which city has the highest average star rating for its businesses on Yelp. 
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
I will need data with star ratings from businesses and the city they are located in. I will also identify states with highest and lowest average star ratings. 
While mixing different categories, I am looking to see what users think overall to be good and bad businesses by city and state categories.

iii. Output of your finished dataset:

By city with highest star rating and it's corresponding state:

+--------------+----------------+-------+
| AverageStars | city           | state |
+--------------+----------------+-------+
|          5.0 | Gastonia       | NC    |
|          5.0 | Sun City       | AZ    |
|          5.0 | Surprise       | AZ    |
|         4.57 | Oakville       | ON    |
|          4.5 | Cottage Grove  | WI    |
|          4.5 | Middleton      | WI    |
|          4.5 | Peninsula      | OH    |
|          4.5 | Scarborough    | ON    |
|         4.48 | Chandler       | AZ    |
|         4.34 | Henderson      | NV    |
|         4.31 | Cleveland      | OH    |
|          4.2 | Charlotte      | NC    |
|         4.16 | Tempe          | AZ    |
|         4.03 | Las Vegas      | NV    |
|         4.03 | Pittsburgh     | PA    |
|          4.0 | Chesterland    | OH    |
|          4.0 | Cuyahoga Falls | OH    |
|          4.0 | Madison        | WI    |
|          4.0 | Mantua         | OH    |
|          4.0 | Medina         | OH    |
|          4.0 | Scottsdale     | AZ    |
|          4.0 | Strongsville   | OH    |
|          4.0 | Tolleson       | AZ    |
|          4.0 | Westlake       | OH    |
|         3.96 | Mesa           | AZ    |
+--------------+----------------+-------+
(Output limit exceeded, 25 of 61 total rows shown)

By state with highest star rating:

+--------------+-------+
| AverageStars | state |
+--------------+-------+
|         4.12 | WI    |
|         4.09 | NV    |
|         4.07 | NC    |
|         4.01 | AZ    |
|         3.75 | OH    |
|         3.69 | ON    |
|         3.63 | PA    |
|          3.5 | HLD   |
|         3.29 | QC    |
|         3.23 | EDH   |
|          3.0 | NI    |
|         2.81 | BW    |
|          2.0 | IL    |
+--------------+-------+
         
As we can in the data table above, Wisconsin had the highest rating of average stars for businesses. 

On the contrary, here can see data for lowest scoring states:

+--------------+-------+
| AverageStars | state |
+--------------+-------+
|          2.0 | IL    |
|         2.81 | BW    |
|          3.0 | NI    |
|         3.23 | EDH   |
|         3.29 | QC    |
|          3.5 | HLD   |
|         3.63 | PA    |
|         3.69 | ON    |
|         3.75 | OH    |
|         4.01 | AZ    |
|         4.07 | NC    |
|         4.09 | NV    |
|         4.12 | WI    |
+--------------+-------+

Illinois had the lowest average star rating for businesses on Yelp. 

iv. Provide the SQL code you used to create your final dataset:

SELECT ROUND(AVG(b.stars),2) AS AverageStars
, b.city
, b.state
FROM category c JOIN business b
ON c.business_id = b.id
GROUP BY b.city
ORDER BY 1 DESC

State:

SELECT ROUND(AVG(b.stars),2) AS AverageStars
, b.state
FROM category c JOIN business b
ON c.business_id = b.id
GROUP BY b.state
ORDER BY 1 DESC

State descending:

SELECT ROUND(AVG(b.stars),2) AS AverageStars
, b.state
FROM category c JOIN business b
ON c.business_id = b.id
GROUP BY b.state
ORDER BY 1 ASC
